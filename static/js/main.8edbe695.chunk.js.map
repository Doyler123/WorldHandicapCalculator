{"version":3,"sources":["serviceWorker.js","theme.js","index.js","constants/index.js","App.js","components/layout/Layout.js","components/definitions/WHSDefinitions.js","util/handicapUtil.js","components/widgets/forms/CustomFormInputs.js","components/handicap/HandicapForm.js","constants/definitions.js","components/handicap/InfoDialog.js","components/handicap/HandicapFormContainer.js"],"names":["Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","NUM_ROUNDS","GROSS","CSS","DEFAULT_CSS","SSS","SLOPE","DEFAULT_SLOPE","SLOPE_DIVISOR","SESSION_STORAGE_KEY","RESULT","useStoredDataState","localStorage","getItem","Constants","createPersistedState","global","sessionStorage","storedData","setStoredData","useState","whsHandicap","setWHSHandicap","style","backgroundColor","className","useStyles","makeStyles","root","flexGrow","ElevationScroll","props","children","trigger","useScrollTrigger","disableHysteresis","threshold","React","cloneElement","elevation","Layout","classes","Fragment","variant","my","container","spacing","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","createData","numDiffs","diffsInCalc","adjustment","rows","SimpleExpansionPanel","item","xs","lg","defaultExpanded","expandIcon","aria-controls","id","textAlign","m","gutterBottom","table","size","aria-label","align","map","row","key","name","component","scope","calculateHandicap","values","hds","getHandicapDifferentials","numRounds","length","sort","a","b","average","Object","keys","filter","value","startsWith","calculateHandicapDifferential","gross","css","replace","slope","sss","reduce","ErrorHandleTextField","formState","text","label","validate","fullWidth","required","endAdornment","margin","undefined","validity","TextField","InputProps","validateOnBlur","helperText","errors","FormHelperTextProps","hidden","display","flexWrap","textField","maxWidth","marginLeft","marginRight","marginTop","button","ScoreFields","roundNumber","inputs","validateField","InfoButton","onclickInfoButton","Grid","sm","type","HandicapForm","onClickCalculate","InputAdornment","position","IconButton","color","onClick","autoComplete","index","Button","event","Transition","forwardRef","ref","Slide","direction","InfoDialog","open","setOpen","dialogInfo","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","title","DialogContent","DialogContentText","info","DialogActions","getInitialState","newState","i","scrollToTop","anchor","target","ownerDocument","querySelector","scrollIntoView","behavior","block","HandicapInfo","useFormState","dialogOpen","setDialogOpen","setDialogInfo","openDialog","Definitions","useEffect","validateForm","calculate","forEach","fieldValue","setFieldError","isNaN","precision","multiplier","Math","pow","round","util"],"mappings":"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","file":"static/js/main.8edbe695.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n    </ThemeProvider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\r\n    NUM_ROUNDS: 20,\r\n    GROSS: \"gross\",\r\n    CSS: \"css\",\r\n    DEFAULT_CSS: 0,\r\n    SSS: \"sss\",\r\n    SLOPE: \"slope\",\r\n    DEFAULT_SLOPE: 125,\r\n    SLOPE_DIVISOR: 113,\r\n    SESSION_STORAGE_KEY: \"handicapdata\",\r\n    RESULT: \"result\"\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Layout from './components/layout/Layout'\r\nimport HandicapForm from './components/handicap/HandicapFormContainer'\r\nimport WHSDefinitions from './components/definitions/WHSDefinitions'\r\nimport createPersistedState from 'use-persisted-state';\r\nimport Constants from './constants'\r\n\r\nconst useStoredDataState = localStorage.getItem(Constants.SESSION_STORAGE_KEY) ? \r\n  createPersistedState(Constants.SESSION_STORAGE_KEY, global.sessionStorage):\r\n  createPersistedState(Constants.SESSION_STORAGE_KEY, global.localStorage)\r\n\r\nfunction App() {\r\n\r\n  const [ storedData, setStoredData ] = useStoredDataState({})\r\n\r\n  const [whsHandicap, setWHSHandicap] = useState(storedData.whsHandicap)\r\n\r\n  return (\r\n    <div style={{backgroundColor: '#f5f5f5'}} className=\"App\">\r\n      <Layout whsHandicap={whsHandicap} >\r\n        <HandicapForm \r\n          whsHandicap={whsHandicap} \r\n          setWHSHandicap={setWHSHandicap}\r\n          storedData={storedData}\r\n          setStoredData={setStoredData}/>\r\n        <WHSDefinitions />\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction ElevationScroll(props) {\r\n  const { children } = props;\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0\r\n  });\r\n\r\n  return React.cloneElement(children, {\r\n    elevation: trigger ? 4 : 0,\r\n  });\r\n}\r\n\r\nElevationScroll.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default function Layout(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <ElevationScroll {...props}>\r\n        <AppBar>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\">World Handicap Calculator</Typography>\r\n            <Typography className={classes.root} variant=\"h6\"></Typography>\r\n            {props.whsHandicap ? <Typography variant=\"subtitle1\">{\"WHS Handicap: \" + props.whsHandicap}</Typography> : null}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </ElevationScroll>\r\n      <Toolbar />\r\n      <Container>\r\n        <Box my={2}>\r\n        <div className={classes.root}>\r\n          <Grid container spacing={3}>\r\n            {props.children}\r\n          </Grid>\r\n        </div>\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Box from '@material-ui/core/Box';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nfunction createData(numDiffs, diffsInCalc, adjustment) {\r\n    return { numDiffs, diffsInCalc, adjustment};\r\n  }\r\n  \r\n  const rows = [\r\n    createData('3', 'Lowest 1', '-2.0'),\r\n    createData('4', 'Lowest 1', '-1.0'),\r\n    createData('5', 'Lowest 1', 'N/A'),\r\n    createData('6', 'Average of lowest 2', '-1.0'),\r\n    createData('7 or 8', 'Average of lowest 2', 'N/A'),\r\n    createData('9 to 11', 'Average of lowest 3', 'N/A'),\r\n    createData('12 to 14', 'Average of lowest 4', 'N/A'),\r\n    createData('15 to 16', 'Average of lowest 5', 'N/A'),\r\n    createData('17 to 18', 'Average of lowest 6', 'N/A'),\r\n    createData('19', 'Average of lowest 7', 'N/A'),\r\n    createData('20', 'Average of lowest 8', 'N/A'),\r\n  ];\r\n\r\nexport default function SimpleExpansionPanel() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={12} lg={6}>\r\n      <ExpansionPanel defaultExpanded>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Handicap Calculations</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <Box textAlign=\"left\" m={1}>\r\n            <Typography variant=\"body1\" gutterBottom>\r\n                In order to transition from CONGU to WHS handicaps, all players' current handicap records \r\n                will be reprocessed using the WHS principles. The calculation will identify the best 8 of \r\n                the last 20 Gross Scores. The Gross Scores will be transformed into score differentials using \r\n                the following formula: <br></br><br></br>\r\n\r\n                Score Differential = 113/slope * (adjusted gross score - CR - CSS) <br></br><br></br>\r\n\r\n                Once the score differentials are calulated the average of the best 8 will determine your WHS Handicap.\r\n                If you do not have 20 previous gross scores, your WHS handicap will be calculated based off the transition\r\n                table below.\r\n            </Typography>\r\n          </Box>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n      <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel2a-content\"\r\n                id=\"panel2a-header\"\r\n            >\r\n            <Typography className={classes.heading}>Transition Table</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        <TableCell align=\"center\">Noumber of Rounds</TableCell>\r\n                        <TableCell align=\"center\">Rounds used in calculation</TableCell>\r\n                        <TableCell align=\"center\">Adjustment</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map(row => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                            {row.numDiffs}\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">{row.diffsInCalc}</TableCell>\r\n                            <TableCell align=\"center\">{row.adjustment}</TableCell>\r\n                        </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    </Grid>\r\n  );\r\n}","import Constants from '../constants'\r\n\r\nexport const calculateHandicap = (values) => {\r\n    let hds = getHandicapDifferentials(values)\r\n    let numRounds = hds.length\r\n    hds.sort((a, b) => a - b)\r\n    \r\n    if(numRounds >= 3){\r\n        if(numRounds === 3){\r\n            return hds[0] - 2\r\n        }else if(numRounds === 4){\r\n            return hds[0] - 1\r\n        }else if(numRounds === 5){\r\n            return hds[0]\r\n        }else if(numRounds === 6){\r\n            return average([hds[0], hds[1]]) - 1\r\n        }else if(numRounds <= 8){\r\n            return average([hds[0], hds[1]])\r\n        }else if(numRounds <= 11){\r\n            return average([hds[0], hds[1], hds[2]])\r\n        }else if(numRounds <= 14){\r\n            return average([hds[0], hds[1], hds[2], hds[3]])\r\n        }else if(numRounds <= 16){\r\n            return average([hds[0], hds[1], hds[2], hds[3], hds[4]])\r\n        }else if(numRounds <= 18){\r\n            return average([hds[0], hds[1], hds[2], hds[3], hds[4], hds[5]])\r\n        }else if(numRounds === 19){\r\n            return average([hds[0], hds[1], hds[2], hds[3], hds[4], hds[5], hds[6]])\r\n        }else{\r\n            return average([hds[0], hds[1], hds[2], hds[3], hds[4], hds[5], hds[6], hds[7]])\r\n        }\r\n    }else{\r\n        return 0\r\n    }\r\n}\r\n\r\nexport const getHandicapDifferentials = (values) => {\r\n    return Object.keys(values)\r\n    .filter( value => value.startsWith(Constants.GROSS) && values[value] !== \"\")\r\n    .map( key => {\r\n        return calculateHandicapDifferential(key, values)\r\n    })\r\n}\r\n\r\nexport const calculateHandicapDifferential = (key, values) => {\r\n    let gross   = values[key] \r\n        let css     = values[key.replace(Constants.GROSS, Constants.CSS)] || Constants.DEFAULT_CSS\r\n        let slope   = values[Constants.SLOPE] || Constants.DEFAULT_SLOPE\r\n        let sss     = values[Constants.SSS]\r\n        return (Constants.SLOPE_DIVISOR / slope) * (gross - sss - css)\r\n}\r\n\r\nexport const average = (values) => {\r\n    if(values.length){\r\n        return values.reduce((a, b) => a + b) / values.length\r\n    }\r\n    return 0\r\n}\r\n\r\nexport function round(value, precision) {\r\n    var multiplier = Math.pow(10, precision || 0);\r\n    return Math.round(value * multiplier) / multiplier;\r\n}","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Input from '@material-ui/core/Input';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst ErrorHandleFormControl = (props) =>{\r\n\r\n    let {formState, name, label, fullWidth, required} = props\r\n  \r\n    var error = formState.validity[name] !== undefined && !formState.validity[name]\r\n    var errorMessage = formState.errors[name]\r\n  \r\n    return(\r\n      <FormControl \r\n          fullWidth={fullWidth}\r\n          required={required}\r\n          error={error}\r\n        >\r\n          <InputLabel htmlFor={name}>{label}</InputLabel>\r\n          {props.children}\r\n          <FormHelperText hidden={!error}>{errorMessage}</FormHelperText>\r\n        </FormControl>\r\n    )\r\n  }\r\n  \r\n  export const ErrorHandleTextField = (props) => {\r\n  \r\n    let {formState, text, name, label, validate, className, fullWidth, required, variant, endAdornment, margin } = props\r\n\r\n    let error = formState.validity[name] !== undefined && !formState.validity[name]\r\n\r\n    return(\r\n          <TextField\r\n            InputProps={{ \r\n                ...text({\r\n                name : name,\r\n                validateOnBlur: true,\r\n                validate: validate\r\n              }),\r\n              id: name, \r\n              name :name,\r\n              endAdornment: endAdornment}}\r\n            className={className}  \r\n            fullWidth={fullWidth}\r\n            required={required}\r\n            error={error}\r\n            label={label}\r\n            margin={margin}\r\n            variant={variant}\r\n            helperText={formState.errors[name]}\r\n            FormHelperTextProps={{\r\n              hidden: !error \r\n            }}\r\n          />\r\n    )\r\n  }\r\n  \r\n export const ErrorHandleSelectField = (props) => {\r\n  \r\n    let {formState, raw, name, label, options} = props\r\n  \r\n    return(\r\n      <ErrorHandleFormControl\r\n        formState={formState}\r\n        name={name}\r\n        label={label}\r\n      >\r\n        <Select\r\n          { ...raw({\r\n            name : name,\r\n            onChange : option => option.target.value\r\n          })}\r\n          inputProps={{\r\n            name: name,\r\n            id: name,\r\n          }}\r\n        >\r\n          {options.map((option, index) => (\r\n            <MenuItem key={option + index} value={option}>{option}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </ErrorHandleFormControl>\r\n    )\r\n  }\r\n\r\n\r\n  export const IconInput = (props) =>{\r\n\r\n    let {Icon} = props\r\n  \r\n    return(\r\n      <Grid container spacing={1} alignItems=\"flex-end\">\r\n        <Grid item>\r\n          <Icon />\r\n        </Grid>\r\n        <Grid item>\r\n         {props.children}\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  \r\n  }","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {ErrorHandleTextField} from '../widgets/forms/CustomFormInputs'\r\nimport Constants from '../../constants'\r\nimport Button from '@material-ui/core/Button';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    maxWidth: \"210px\",\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst ScoreFields = ({roundNumber, formState, inputs, classes, validateField, onclickInfoButton, InfoButton}) => {\r\n    \r\n    return (\r\n        <Grid item sm={12} >\r\n            <ErrorHandleTextField\r\n                formState={formState}\r\n                text={inputs.text}\r\n                name={Constants.GROSS + roundNumber}\r\n                label={`Round ${roundNumber} Gross`}\r\n                fullWidth={false}\r\n                required={false}\r\n                validate={(value) => validateField(value)}\r\n                className={classes.textField}\r\n                variant=\"outlined\"\r\n                margin={\"dense\"}\r\n            />\r\n\r\n            <ErrorHandleTextField\r\n                formState={formState}\r\n                text={inputs.text}\r\n                name={Constants.CSS + roundNumber}\r\n                label={`CSS`}\r\n                fullWidth={false}\r\n                required={false}\r\n                validate={(value) => validateField(value)}\r\n                className={classes.textField}\r\n                variant=\"outlined\"\r\n                endAdornment={<InfoButton type={Constants.CSS}/>}\r\n                margin={\"dense\"}\r\n            />\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default function HandicapForm({formState, inputs, validateField, onClickCalculate, onclickInfoButton}) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const InfoButton = ({type}) => {\r\n    return(\r\n      <InputAdornment position=\"end\">\r\n        <IconButton\r\n          style={{color: '#B2B2B2'}}\r\n          aria-label=\"show field info\"\r\n          onClick={() => onclickInfoButton(type)}\r\n        >\r\n          <InfoOutlinedIcon />\r\n        </IconButton>\r\n      </InputAdornment>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form className={classes.container} autoComplete={false}>\r\n        <Grid container >\r\n        <Grid item sm={12} >\r\n          <ErrorHandleTextField\r\n                  formState={formState}\r\n                  text={inputs.text}\r\n                  name={Constants.SSS}\r\n                  label={`CR or SSS`}\r\n                  fullWidth={false}\r\n                  required={true}\r\n                  validate={(value) => validateField(value)}\r\n                  className={classes.textField}\r\n                  variant=\"outlined\"\r\n                  margin={\"dense\"}\r\n                  endAdornment={<InfoButton type={Constants.SSS}/>}\r\n              />\r\n\r\n              <ErrorHandleTextField\r\n                  formState={formState}\r\n                  text={inputs.text}\r\n                  name={Constants.SLOPE}\r\n                  label={`Slope`}\r\n                  fullWidth={false}\r\n                  required={false}\r\n                  validate={(value) => validateField(value)}\r\n                  className={classes.textField}\r\n                  variant=\"outlined\"\r\n                  margin={\"dense\"}\r\n                  endAdornment={<InfoButton type={Constants.SLOPE}/>}\r\n              />  \r\n        </Grid>\r\n        <Grid item sm={12} >\r\n          {/* <Divider style={{marginTop : '10px'}} component={'div'} variant={\"middle\"}/>  */}\r\n        </Grid>\r\n          {Object.keys(formState.values).filter( value => value.startsWith(Constants.GROSS)).map( (key, index) => (\r\n              <ScoreFields \r\n                roundNumber={index + 1} \r\n                formState={formState} \r\n                inputs={inputs} \r\n                classes={classes} \r\n                validateField={validateField}\r\n                onclickInfoButton={onclickInfoButton}\r\n                InfoButton={InfoButton}\r\n                />\r\n          ))}\r\n        </Grid>\r\n        <Grid item sm={12} >\r\n          <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={(event) => {onClickCalculate(event, formState.values)}}\r\n              className={classes.button}\r\n              >\r\n                  {\"Calculate\"}\r\n          </Button> \r\n        </Grid>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}","export default {\r\n    sss: `Course Rating (CR) or Standard Scratch (SSS) is the number of strokes a scratch golfer \r\n        is expected to score around the course under normal mid-season conditions. The CR or SSS can \r\n        usually be found on your clubs scorecard.`,\r\n    slope: `A \"Slope Rating\" is the USGA's mark that indicates the measurement of the relative difficulty of a course for\r\n        players who are not scratch golfers compared to the USGA Course Rating (e.g., compared to the difficulty of a\r\n        course for scratch golfers). A Slope Rating is computed from the difference between the Bogey Rating and\r\n        the USGA Course Rating. The lowest Slope Rating is 55 and the highest is 155. A golf course of standard playing\r\n        difficulty has a Slope Rating of 113. If a course does not yet have a slope rating, an average slope rating \r\n        of 125 will be used for calculation purposes`,\r\n    css: `The Competition Standard Scratch (CSS) is a calculation made on any given day depending solely on \r\n        the scores of the players taking part and is an indication of how diffucult the course played. CSS can range from 1 lower than SSS to 3\r\n        higher. If no CSS is provided for a round it will default to the course SSS`\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Constants from '../../constants'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function InfoDialog({open, setOpen, dialogInfo}) {\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">{dialogInfo.title}</DialogTitle>\r\n        <DialogContent>\r\n          {dialogInfo.type !== Constants.RESULT ? <DialogContentText id=\"alert-dialog-slide-description\">\r\n            {dialogInfo.info}\r\n          </DialogContentText> \r\n          : <DialogContentText id=\"alert-dialog-slide-description\" variant=\"h4\" align=\"center\" >\r\n            {dialogInfo.info}\r\n          </DialogContentText>}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Constants from '../../constants'\r\nimport * as util from '../../util/handicapUtil';\r\nimport { useFormState } from 'react-use-form-state';\r\nimport HandicapForm from './HandicapForm'\r\nimport Definitions from '../../constants/definitions'\r\nimport InfoDialog from './InfoDialog'\r\n\r\nconst getInitialState = (storedData) => {\r\n\r\n  if(!Object.keys(storedData).length > 0){\r\n      var newState = {}\r\n  \r\n      var numRounds = Constants.NUM_ROUNDS;\r\n  \r\n      for(var i=1; i <= numRounds; i++){\r\n          newState[Constants.GROSS + i] = \"\"\r\n          newState[Constants.CSS + i]   = \"\"\r\n      }\r\n      return newState\r\n  }\r\n\r\n  return storedData\r\n\r\n}\r\n\r\nconst scrollToTop = event => {\r\n  const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\r\n\r\n  if (anchor) {\r\n    anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n  }\r\n};\r\n\r\nexport default function HandicapInfo({ whsHandicap, setWHSHandicap, storedData, setStoredData }) {\r\n  \r\n  const [formState, inputs] = useFormState(getInitialState(storedData));\r\n\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n  const [dialogInfo, setDialogInfo] = useState({\r\n    title: \"\",\r\n    info: \"\",\r\n    type : \"\"\r\n  })\r\n  \r\nconst openDialog = (type) => {\r\n  switch(type){\r\n    case Constants.SSS:\r\n      setDialogInfo({ title: \"CR or SSS\", info: Definitions[Constants.SSS], type: type})\r\n      break;\r\n    case Constants.SLOPE:\r\n      setDialogInfo({ title: \"Slope\", info: Definitions[Constants.SLOPE], type: type})\r\n      break;\r\n    case Constants.CSS:\r\n      setDialogInfo({ title: \"CSS\", info: Definitions[Constants.CSS], type: type})\r\n      break;\r\n    case Constants.RESULT:\r\n      setDialogInfo({title: \"WHS Handicap\", info: whsHandicap, type: type})\r\n      break;\r\n      \r\n  }\r\n  setDialogOpen(true)\r\n}\r\n\r\nconst onClickCalculate = (event, values) => {\r\n  if(validateForm()){\r\n    setWHSHandicap(util.round(util.calculateHandicap(values), 1))\r\n    if(whsHandicap){\r\n      scrollToTop(event)\r\n      openDialog(Constants.RESULT)\r\n      setStoredData({...storedData, whsHandicap: whsHandicap})\r\n    }\r\n  }else{\r\n    scrollToTop(event)\r\n  }\r\n}\r\n\r\nuseEffect(()=>{\r\n  if(whsHandicap && storedData.whsHandicap !== whsHandicap){\r\n    openDialog(Constants.RESULT)\r\n    setStoredData({...storedData, whsHandicap: whsHandicap})\r\n  }\r\n}, [whsHandicap])\r\n\r\nconst validateForm = () => {\r\n\r\n  let calculate = true\r\n\r\n  Object.keys(formState.values).forEach(key => {\r\n    let fieldValue = formState.values[key]\r\n\r\n    if(key === Constants.SSS){\r\n      if(!fieldValue){\r\n        formState.setFieldError(key, \"*Required\")\r\n        calculate = false\r\n      }\r\n    }\r\n\r\n    if(key === Constants.SLOPE){\r\n      if(fieldValue){\r\n        if(isNaN(fieldValue)){\r\n          formState.setFieldError(key, \"Not a number\")\r\n          calculate = false\r\n        }else if(fieldValue < 55 || fieldValue > 155){\r\n          formState.setFieldError(key, \"Must be between 55 - 155\")\r\n          calculate = false\r\n        }\r\n      }\r\n    }\r\n\r\n    if(key.startsWith(Constants.GROSS)){\r\n      if(isNaN(fieldValue)){\r\n        formState.setFieldError(key, \"Not a number\")\r\n        calculate = false\r\n      }\r\n    }\r\n\r\n    if(key.startsWith(Constants.CSS)){\r\n\r\n      let sss = formState.values[Constants.SSS]\r\n      if(fieldValue){\r\n        if(isNaN(fieldValue)){\r\n          formState.setFieldError(key, \"Not a number\")\r\n          calculate = false\r\n        }else if(sss && (fieldValue < sss - 1 || fieldValue > sss + 3) ){\r\n          formState.setFieldError(key, \"SSS -1/+3\")\r\n          calculate = false\r\n        }\r\n      }\r\n    }\r\n\r\n  })\r\n\r\n  return calculate\r\n}\r\n\r\nconst validateField = (value) => {\r\n    if(isNaN(value)){\r\n        return \"Not a number\"\r\n    }\r\n\r\n    setStoredData({...storedData, ...formState.values})\r\n\r\n    return true\r\n}\r\n\r\n  return (\r\n        <Grid item xs={12} lg={6}>\r\n          <div id=\"back-to-top-anchor\"></div>\r\n          <InfoDialog open={dialogOpen} setOpen={setDialogOpen} dialogInfo={dialogInfo}/>\r\n          <HandicapForm \r\n            formState={formState}\r\n            inputs={inputs}\r\n            validateField={validateField}\r\n            onClickCalculate={onClickCalculate}\r\n            onclickInfoButton={openDialog}\r\n          />\r\n        </Grid>\r\n  );\r\n}"],"sourceRoot":""}